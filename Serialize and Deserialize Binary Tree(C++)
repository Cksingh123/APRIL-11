class Codec {
public:
    // Serialize the tree into a string
    string serialize(TreeNode* root) {
        if (!root) return "#";
        return to_string(root->val) + "," + serialize(root->left) + "," + serialize(root->right);
    }

    // Helper function to split the string
    TreeNode* helper(queue<string>& nodes) {
        string val = nodes.front();
        nodes.pop();
        if (val == "#") return nullptr;
        
        TreeNode* node = new TreeNode(stoi(val));
        node->left = helper(nodes);
        node->right = helper(nodes);
        return node;
    }

    // Deserialize the string back to tree
    TreeNode* deserialize(string data) {
        stringstream ss(data);
        string item;
        queue<string> nodes;

        // Split the data by commas
        while (getline(ss, item, ',')) {
            nodes.push(item);
        }

        return helper(nodes);
    }
};
